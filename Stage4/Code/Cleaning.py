import re, string

'''
This function cleans the 'RAM' and 'Hard Drive Capacity' features of the input
table. It accomplishes three things:

1. Replaces occurrences of 'KB' with 'GB'. In the walmart table capacities are listed
   as kilobytes in size when clearly it is meant to be in gigabytes.
2. Change occurrences of '6 GB' of RAM to '8 GB' if the name of the laptop suggests 
   that it should be 8 GB. This is a problem in the Amazon data because some laptops
   are listed to have 6 GB of RAM when the name of the laptop suggests otherwise.
3. Replace occurrences of '1000 GB' or '1,000 GB' with '1 TB'. In both tables, these
   are used interchangeably, but we want to force the same format for all tuples.
'''
def clean_capacity(data):


    # iterate through the rows of the dataframe
    for i in range(len(data)):

        # Get the current capacity values
        ram = data.iloc[i, data.columns.get_loc('RAM')]
        drive = data.iloc[i, data.columns.get_loc('Hard Drive Capacity')]
        name = data.iloc[i, data.columns.get_loc('Name')]

        # If necessary clean the occurances of KB instead of GB
        if isinstance(ram, str) and 'KB' in ram:
            data.set_value(i, 'RAM', ram.replace('KB', 'GB'))
        if isinstance(drive, str) and 'KB' in drive:
            data.set_value(i, 'Hard Drive Capacity', drive.replace('KB', 'GB'))

        # Fix RAM listed as 6GB if necessary
        if isinstance(ram, str) and '6 GB' in ram:
            # Only change if we know it should be 8 by looking at the name
            if isinstance(name, str) and ('8 GB' in name or '8GB' in name):
                data.set_value(i, 'RAM', ram.replace('6', '8'))

        # Fix 1000GB vs 1TB issue
        if isinstance(drive, str):
            drive = drive.replace(',', '')
            if '1000' in drive:
                drive = drive.replace('1000', '1')
                drive = drive.replace('GB', 'TB')
                data.set_value(i, 'Hard Drive Capacity', drive)


'''
This function cleans the brands column of the input data frame. Sometimes the brand
int he amazon data is listed as 'Lenovo_320' instead of just 'Lenovo'. By changing 
these cases, we can use an attribute equivalence blocker on the two tables for brand.
'''
def clean_brands(data):

    # iterate through the rows of the dataframe
    for i in range(len(data)):

        # Get the current brand values
        brand = data.iloc[i, data.columns.get_loc('Brand')]

        # If it is not missing clean the data
        if type(brand) != float:
            data.set_value(i, 'Brand', brand.replace('_320', ''))


'''
This function gets the list of common words in the common_words.txt file. This list is
used by the clean_names function.
'''
def get_common_words():
    # Open file containing list of common words
    file = open('/u/p/m/pmartinkus/Documents/CS_838/Stage3/HW3/common_words.txt')

    # each line contains one word
    words = []
    for line in file:
        words.append(line.strip())
    return words


'''
Creates a new column in the input dataframe called 'Clean Name'. This column uses the 
list generated by get_column_words to create a feature that better represents a given
laptop by removing words that commonly appear across all laptop names.
'''
def clean_names(data, common_words):

    # Create a regex
    regex = re.compile('[%s]' % re.escape(string.punctuation))

    # Add a clean names column
    data['Clean Name'] = ''

    # iterate through the rows of the dataframe
    for i in range(len(data)):

        # Get the current names
        name = data.iloc[i, data.columns.get_loc('Name')]

        # Remove punctuation from the name
        name = regex.sub(' ', name)
        name = name.replace('"', '')

        # Remove very common words from the name
        name = ' '.join([word for word in name.split() if word.lower() not in common_words])

        data.set_value(i, 'Clean Name', name)